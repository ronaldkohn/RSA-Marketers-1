import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

class CleanData:
    def __init__(self, start, end):

        self.start = start
        self.end = end

        self.df = pd.read_csv('/home/harryj/Documents/RSA/Data/cripps20112014.csv')
        self.df['date'] = pd.Series([pd.to_datetime(date) for date in self.df['date']])
        self.df = self.df.set_index(['date'])

    def clean_data(self):

        idx = pd.date_range(self.start, self.end, periods=None, freq='D')
        self.df = self.df.reindex(idx)
        self.df = self.df.fillna(method='pad')
        return self.df


class Prediction:

    def __init__(self, p_start, p_end):
        self.p_start = p_start
        self.p_end = p_end
        plen = self.p_end - self.p_start

        # data directory
        self.DATA = '/home/ronald/data/cripps20112014.csv'

        # Define sum weightings as constants
        self.LAST_VALUE_W = 0.018002537
        self.WEEK_2_W = 0.318200251
        self.YEAR_1_W = 0.029406001
        self.YEAR_2_W = 0.223831008
        self.MOVING_AVERAGE_W = 0.408821425

        # define moving average length
        self.MOVING_AVERAGE_LENGTH = 52

        # import csv
        self.df = pd.read_csv(self.DATA)
        self.df['predictedvalue'] = np.nan
        self.df['error'] = np.nan
        self.df['MA'] = np.nan
        self.ERRORQ1 = None
        self.ERRORQ2 = None
        self.ERRORQ3 = None
        self.ERRORQ4 = None
        self.TOTAL_ERROR = None
        self.rmq = np.nan

    # define prediction function
    def predict(self):

        lv = self.df['value'][self.p_start-1:self.p_end-1].values * self.LAST_VALUE_W
        w2 = self.df['value'][self.p_start-2:self.p_end-2].values * self.WEEK_2_W
        y1 = self.df['value'][self.p_start-52:self.p_end-52].values * self.YEAR_1_W
        y2 = self.df['value'][self.p_start-104:self.p_end-104].values * self.YEAR_2_W
        self.df['MA'][self.p_start-self.MOVING_AVERAGE_LENGTH:self.p_end] = pd.rolling_mean(self.df['value'][self.p_start-self.MOVING_AVERAGE_LENGTH:self.p_end], self.MOVING_AVERAGE_LENGTH)
        rm = self.df['MA'][self.p_start:self.p_end].values * self.MOVING_AVERAGE_W

        self.df['predictedvalue'][self.p_start:self.p_end] = lv + w2 + y1 + y2 + rm
        self.df['error'][self.p_start:self.p_end] = abs(self.df['predictedvalue'][self.p_start:self.p_end] - self.df['value'][self.p_start:self.p_end])/self.df['value'][self.p_start:self.p_end]

        print self.df['predictedvalue'][self.p_start:self.p_end]

        self.TOTAL_ERROR = np.mean(self.df['error'][self.p_start:self.p_end])
        print 'Total average error for the predicted time range is', self.TOTAL_ERROR
        return self.df[['predictedvalue', 'error', 'value']][self.p_start:self.p_end]

def plot(source):
    plt.plot(source.index, source['predictedvalue'], 'r-')
    plt.plot(source.index, source['value'], 'b-')
    plt.plot(source.index, source['error']*10, 'r^')
    plt.xlabel('date')
    plt.ylabel('value')
    plt.title('RSA: Predicted CP Apples (red) vs. Actual CP Apples (blue)')
    plt.show()

#p = CleanData('07/01/2011', '31/12/2014')
#print p.clean_data()

p124 = Prediction(124,176)
plot(p124.predict())
